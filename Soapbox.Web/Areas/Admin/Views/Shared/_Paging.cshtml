@model IPagingData
@{
  var prevPage = Math.Max(Model.Page - 1, 1);
  var lowPage = Math.Max(Model.Page - 2, 1);

  var highPage = Math.Min(Model.Page + 2, Model.PageCount);
  var nextPage = Math.Min(Model.Page + 1, Model.PageCount);
}

<style>
  .paging .pages {
    display: flex;
    gap: .5rem;    
  }

  .pages > a {
    display: inline-block;
    padding: 0 .5rem;
    border: 1px solid var(--accent1-400);
    border-radius: 4px;
  }

  .pages > [active] {
    background: var(--accent1-400);
    color: var(--text-color);
  }
</style>

<div class="paging">
  <div class="pages">
    <a asp-route-page="@prevPage" disabled="@(Model.Page == 1)"><i class="fa fa-angle-left"></i></a>
    @if(lowPage > 1)
    {
      <a asp-route-page="1">1</a>
    }
    @if(lowPage > 2)
    {
      <span>...</span>
    }
    @for(var page = lowPage; page <= highPage; page++)
    {
      <a asp-route-page="@(page)" active="@(page == Model.Page)">@(page)</a>
    }
    @if(highPage < Model.PageCount - 1)
    {
        <span>...</span>
    }
    @if(highPage < Model.PageCount)
    {
      <a asp-route-page="@Model.PageCount">@Model.PageCount</a>
    }
    <a asp-route-page="@nextPage" disabled="@(Model.Page == Model.PageCount)"><i class="fa fa-angle-right"></i></a>
  </div>
</div>
