@using Soapbox.Application
@using Soapbox.Application.Constants
@using Soapbox.Domain.Markdown
@model Post
@inject Soapbox.Domain.Markdown.IMarkdownParser Parser

@{
  // SEO Data
  ViewData[ViewConstants.PageTitle] = Model.Title;
  var content = Parser.ToHtml(Model.Content, out var images);
  var description = !string.IsNullOrWhiteSpace(Model.Excerpt)
      ? Model.Excerpt
      : content;

  ViewData[ViewConstants.Description] = description.StripHtml().Clip(87);
  ViewData[ViewConstants.Keywords] = string.Join(", ", Model.Categories.Select(c => c.Name));
  ViewData[ViewConstants.Author] = Model.Author?.ShownName;
  ViewData[ViewConstants.Image] = images.FirstOrDefault();
  ViewData[ViewConstants.Video] = null;
}

<article class="post">
  <header>
    <div class="container relative">
      <h1><blog-link post="Model" /></h1>
      <div class="quick-actions" is-signed-in>
        <edit-post-link post="Model" action="Edit"><i class="fa fa-edit"></i></edit-post-link>
      </div>
      <div class="meta-data">
        <div>
          <i class="fa fa-calendar"></i>
          <time value=Model.PublishedOn />
        </div>
        <div>
          <i class="fa fa-user-circle"></i>
          <blog-link author="Model.Author" />
        </div>
        <div class="tag-list" condition="Model.Categories.Any()">
          <i class="fa fa-tags"></i>
          @foreach (var category in Model.Categories)
          {
            <div class="tag"><blog-link category="category" /></div>
          }
        </div>
      </div>
    </div>
  </header>
  <section class="body">
    <div class="container markdown-content">
      @Html.Raw(Parser.ToHtml(Model.Content, out var _))
    </div>
  </section>
  <footer>
    <aside class="container">
      <partial name="_Share" model="Model" />
    </aside>
  </footer>
</article>
